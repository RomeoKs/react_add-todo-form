{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","cn","TodoList","todos","map","getUserById","usersFromServer","find","newTodos","userId","App","useState","newTodoTitle","setNewTodoTitle","newTodoUserId","setNewTodoUserId","setCompleted","setTodos","isTitleOnSubmit","setIsTitleOnSubmit","isUserOnSubmit","setIsUserOnSubmit","selectedUser","onSubmit","event","preventDefault","newTodo","Date","now","type","placeholder","value","onChange","target","disabled","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7863b5d7.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const {\n    email,\n    name,\n  } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      key={id}\n      data-id={id}\n      className={cn('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (\n        <UserInfo user={user} />\n      )}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => {\n      return (\n        <TodoInfo key={todo.id} todo={todo} />\n      );\n    })}\n  </section>\n);\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { User } from './types/User';\n// import { Todo } from './types/Todo';\n\nimport { TodoList } from './components/TodoList';\n\nconst getUserById = (id: number): User | null => {\n  const foundUser = usersFromServer.find(user => user.id === id);\n\n  return foundUser || null;\n};\n\nconst newTodos = todosFromServer.map(todo => (\n  {\n    ...todo,\n    user: getUserById(todo.userId),\n  }\n));\n\nexport const App = () => {\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n  const [newTodoUserId, setNewTodoUserId] = useState(0);\n  const [completed, setCompleted] = useState(false);\n  const [todos, setTodos] = useState(newTodos);\n  const [isTitleOnSubmit, setIsTitleOnSubmit] = useState(false);\n  const [isUserOnSubmit, setIsUserOnSubmit] = useState(false);\n\n  // console.log(todosFromServer);\n\n  const selectedUser = getUserById(newTodoUserId);\n  // const user = getUserById(todo.userId);\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    const newTodo = {\n      id: Date.now(),\n      title: newTodoTitle,\n      userId: newTodoUserId,\n      completed,\n      user: getUserById(newTodoUserId),\n    };\n\n    setIsTitleOnSubmit(!newTodoTitle);\n    setIsUserOnSubmit(!newTodoUserId);\n\n    if (newTodoTitle && newTodoUserId) {\n      setNewTodoTitle('');\n      setNewTodoUserId(0);\n      setTodos([...todos, newTodo]);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>{selectedUser ? selectedUser.name : 'No user selected'}</h1>\n\n      <form onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label>\n            Title:\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={newTodoTitle}\n              onChange={(event) => {\n                setNewTodoTitle(event.target.value);\n              }}\n            />\n          </label>\n          {isTitleOnSubmit && (\n            <span\n              className=\"error\"\n            >\n              Please enter a title\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            User:\n            <select\n              data-cy=\"userSelect\"\n              value={newTodoUserId}\n              onChange={event => {\n                setNewTodoUserId(+event.target.value);\n              }}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n\n              {usersFromServer.map(user => (\n                <option value={user.id} key={user.id}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          {isUserOnSubmit && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={completed}\n              onChange={(event) => {\n                setCompleted(event.target.checked);\n              }}\n            />\n            Is Completed\n          </label>\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}